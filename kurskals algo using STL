#include<bits/stdc++.h>
using namespace std;

struct disjointsets{
	int  *r , *p;
	int n;
    disjointsets(int n){  
	this->n =n ; // here the n on left side is of structure and on right is of argument in fucntion
	r = new int[ n+1 ];
	p = new int[ n+1 ];  // making the array
	for(int i =0 ; i <= n ; i++){
		r[i]= 0;
		p[i]=i;
	}
}
int find(int u){   // notice here arguments are also declared before usage
	if(u!=p[u]){
		p[u]=find(p[u]);
	}
	return p[u];

}

void  merge(int u,int v){   // notice here arguments are also declared before usage
	if(r[u]>=r[v]){ 
		p[v]=p[u];
	}
	else {
		p[u]=p[v];
	}

}

} ; //end of structure

long int kurskal(vector<pair<int,pair<int,int>>> edges,int n ){
	long long int sum =0;
	bool vis[n];
	set<int > weights;
	
	sort(edges.begin(),edges.end());   // remember this as now its a vector so cant use(edges,edges+n)
	disjointsets sets(n);
	int count =1; // counts the number of egdes in mst.
	vector< pair< int, pair<int ,int> > >  :: iterator it;
	it = edges.begin();  // assigning vector address to the pointer
	while(count <n){
		
		int a = it->second.first;
		int b = it->second.second;
		int parent_a= sets.find(a);
		int parent_b= sets.find(b);
		if(parent_a != parent_b){
			count++; // edge added to the mst
			sum= sum+it->first;
			sets.merge(parent_a,parent_b);
		}
		it++;
	}
    return sum;
	
}
int main(){
	int n,m,w;
	
	cin>>n>>m;
	vector<pair<int,pair<int,int>>> edges;  // vertices starting form 1 not 0
	while(m--){
		int a,b,w;
		cin>>a>>b>>w;
		edges.push_back({w,{a,b}});
	}
	long int ans;
	ans = kurskal(edges,n);
	cout<<ans;

}
